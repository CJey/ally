// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: ally.xiao.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ally_ListenSocket_FullMethodName    = "/xiao.ally.Ally/ListenSocket"
	Ally_CloseSocket_FullMethodName     = "/xiao.ally.Ally/CloseSocket"
	Ally_ReloadApp_FullMethodName       = "/xiao.ally.Ally/ReloadApp"
	Ally_Heartbeat_FullMethodName       = "/xiao.ally.Ally/Heartbeat"
	Ally_GetAppInfo_FullMethodName      = "/xiao.ally.Ally/GetAppInfo"
	Ally_GetInstanceInfo_FullMethodName = "/xiao.ally.Ally/GetInstanceInfo"
)

// AllyClient is the client API for Ally service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllyClient interface {
	ListenSocket(ctx context.Context, in *ListenSocketRequest, opts ...grpc.CallOption) (*ListenSocketResponse, error)
	CloseSocket(ctx context.Context, in *CloseSocketRequest, opts ...grpc.CallOption) (*CloseSocketResponse, error)
	ReloadApp(ctx context.Context, in *ReloadAppRequest, opts ...grpc.CallOption) (*ReloadAppResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error)
	GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error)
}

type allyClient struct {
	cc grpc.ClientConnInterface
}

func NewAllyClient(cc grpc.ClientConnInterface) AllyClient {
	return &allyClient{cc}
}

func (c *allyClient) ListenSocket(ctx context.Context, in *ListenSocketRequest, opts ...grpc.CallOption) (*ListenSocketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListenSocketResponse)
	err := c.cc.Invoke(ctx, Ally_ListenSocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allyClient) CloseSocket(ctx context.Context, in *CloseSocketRequest, opts ...grpc.CallOption) (*CloseSocketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSocketResponse)
	err := c.cc.Invoke(ctx, Ally_CloseSocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allyClient) ReloadApp(ctx context.Context, in *ReloadAppRequest, opts ...grpc.CallOption) (*ReloadAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadAppResponse)
	err := c.cc.Invoke(ctx, Ally_ReloadApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allyClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, Ally_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allyClient) GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppInfoResponse)
	err := c.cc.Invoke(ctx, Ally_GetAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allyClient) GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInstanceInfoResponse)
	err := c.cc.Invoke(ctx, Ally_GetInstanceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllyServer is the server API for Ally service.
// All implementations must embed UnimplementedAllyServer
// for forward compatibility.
type AllyServer interface {
	ListenSocket(context.Context, *ListenSocketRequest) (*ListenSocketResponse, error)
	CloseSocket(context.Context, *CloseSocketRequest) (*CloseSocketResponse, error)
	ReloadApp(context.Context, *ReloadAppRequest) (*ReloadAppResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error)
	GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error)
	mustEmbedUnimplementedAllyServer()
}

// UnimplementedAllyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAllyServer struct{}

func (UnimplementedAllyServer) ListenSocket(context.Context, *ListenSocketRequest) (*ListenSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenSocket not implemented")
}
func (UnimplementedAllyServer) CloseSocket(context.Context, *CloseSocketRequest) (*CloseSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSocket not implemented")
}
func (UnimplementedAllyServer) ReloadApp(context.Context, *ReloadAppRequest) (*ReloadAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadApp not implemented")
}
func (UnimplementedAllyServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAllyServer) GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedAllyServer) GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceInfo not implemented")
}
func (UnimplementedAllyServer) mustEmbedUnimplementedAllyServer() {}
func (UnimplementedAllyServer) testEmbeddedByValue()              {}

// UnsafeAllyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllyServer will
// result in compilation errors.
type UnsafeAllyServer interface {
	mustEmbedUnimplementedAllyServer()
}

func RegisterAllyServer(s grpc.ServiceRegistrar, srv AllyServer) {
	// If the following call pancis, it indicates UnimplementedAllyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ally_ServiceDesc, srv)
}

func _Ally_ListenSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).ListenSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_ListenSocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).ListenSocket(ctx, req.(*ListenSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ally_CloseSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).CloseSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_CloseSocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).CloseSocket(ctx, req.(*CloseSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ally_ReloadApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).ReloadApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_ReloadApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).ReloadApp(ctx, req.(*ReloadAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ally_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ally_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_GetAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).GetAppInfo(ctx, req.(*GetAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ally_GetInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllyServer).GetInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ally_GetInstanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllyServer).GetInstanceInfo(ctx, req.(*GetInstanceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ally_ServiceDesc is the grpc.ServiceDesc for Ally service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ally_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xiao.ally.Ally",
	HandlerType: (*AllyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListenSocket",
			Handler:    _Ally_ListenSocket_Handler,
		},
		{
			MethodName: "CloseSocket",
			Handler:    _Ally_CloseSocket_Handler,
		},
		{
			MethodName: "ReloadApp",
			Handler:    _Ally_ReloadApp_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Ally_Heartbeat_Handler,
		},
		{
			MethodName: "GetAppInfo",
			Handler:    _Ally_GetAppInfo_Handler,
		},
		{
			MethodName: "GetInstanceInfo",
			Handler:    _Ally_GetInstanceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ally.xiao.proto",
}
