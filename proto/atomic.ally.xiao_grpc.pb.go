// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: atomic.ally.xiao.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Atomic_AtomicAdd_FullMethodName            = "/xiao.ally.Atomic/AtomicAdd"
	Atomic_AtomicLoad_FullMethodName           = "/xiao.ally.Atomic/AtomicLoad"
	Atomic_AtomicStore_FullMethodName          = "/xiao.ally.Atomic/AtomicStore"
	Atomic_AtomicSwap_FullMethodName           = "/xiao.ally.Atomic/AtomicSwap"
	Atomic_AtomicCompareAndSwap_FullMethodName = "/xiao.ally.Atomic/AtomicCompareAndSwap"
)

// AtomicClient is the client API for Atomic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomicClient interface {
	AtomicAdd(ctx context.Context, in *AtomicAddRequest, opts ...grpc.CallOption) (*AtomicAddResponse, error)
	AtomicLoad(ctx context.Context, in *AtomicLoadRequest, opts ...grpc.CallOption) (*AtomicLoadResponse, error)
	AtomicStore(ctx context.Context, in *AtomicStoreRequest, opts ...grpc.CallOption) (*AtomicStoreResponse, error)
	AtomicSwap(ctx context.Context, in *AtomicSwapRequest, opts ...grpc.CallOption) (*AtomicSwapResponse, error)
	AtomicCompareAndSwap(ctx context.Context, in *AtomicCompareAndSwapRequest, opts ...grpc.CallOption) (*AtomicCompareAndSwapResponse, error)
}

type atomicClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicClient(cc grpc.ClientConnInterface) AtomicClient {
	return &atomicClient{cc}
}

func (c *atomicClient) AtomicAdd(ctx context.Context, in *AtomicAddRequest, opts ...grpc.CallOption) (*AtomicAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AtomicAddResponse)
	err := c.cc.Invoke(ctx, Atomic_AtomicAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicClient) AtomicLoad(ctx context.Context, in *AtomicLoadRequest, opts ...grpc.CallOption) (*AtomicLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AtomicLoadResponse)
	err := c.cc.Invoke(ctx, Atomic_AtomicLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicClient) AtomicStore(ctx context.Context, in *AtomicStoreRequest, opts ...grpc.CallOption) (*AtomicStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AtomicStoreResponse)
	err := c.cc.Invoke(ctx, Atomic_AtomicStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicClient) AtomicSwap(ctx context.Context, in *AtomicSwapRequest, opts ...grpc.CallOption) (*AtomicSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AtomicSwapResponse)
	err := c.cc.Invoke(ctx, Atomic_AtomicSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicClient) AtomicCompareAndSwap(ctx context.Context, in *AtomicCompareAndSwapRequest, opts ...grpc.CallOption) (*AtomicCompareAndSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AtomicCompareAndSwapResponse)
	err := c.cc.Invoke(ctx, Atomic_AtomicCompareAndSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtomicServer is the server API for Atomic service.
// All implementations must embed UnimplementedAtomicServer
// for forward compatibility.
type AtomicServer interface {
	AtomicAdd(context.Context, *AtomicAddRequest) (*AtomicAddResponse, error)
	AtomicLoad(context.Context, *AtomicLoadRequest) (*AtomicLoadResponse, error)
	AtomicStore(context.Context, *AtomicStoreRequest) (*AtomicStoreResponse, error)
	AtomicSwap(context.Context, *AtomicSwapRequest) (*AtomicSwapResponse, error)
	AtomicCompareAndSwap(context.Context, *AtomicCompareAndSwapRequest) (*AtomicCompareAndSwapResponse, error)
	mustEmbedUnimplementedAtomicServer()
}

// UnimplementedAtomicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAtomicServer struct{}

func (UnimplementedAtomicServer) AtomicAdd(context.Context, *AtomicAddRequest) (*AtomicAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicAdd not implemented")
}
func (UnimplementedAtomicServer) AtomicLoad(context.Context, *AtomicLoadRequest) (*AtomicLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicLoad not implemented")
}
func (UnimplementedAtomicServer) AtomicStore(context.Context, *AtomicStoreRequest) (*AtomicStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicStore not implemented")
}
func (UnimplementedAtomicServer) AtomicSwap(context.Context, *AtomicSwapRequest) (*AtomicSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicSwap not implemented")
}
func (UnimplementedAtomicServer) AtomicCompareAndSwap(context.Context, *AtomicCompareAndSwapRequest) (*AtomicCompareAndSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicCompareAndSwap not implemented")
}
func (UnimplementedAtomicServer) mustEmbedUnimplementedAtomicServer() {}
func (UnimplementedAtomicServer) testEmbeddedByValue()                {}

// UnsafeAtomicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomicServer will
// result in compilation errors.
type UnsafeAtomicServer interface {
	mustEmbedUnimplementedAtomicServer()
}

func RegisterAtomicServer(s grpc.ServiceRegistrar, srv AtomicServer) {
	// If the following call pancis, it indicates UnimplementedAtomicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Atomic_ServiceDesc, srv)
}

func _Atomic_AtomicAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).AtomicAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_AtomicAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).AtomicAdd(ctx, req.(*AtomicAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomic_AtomicLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).AtomicLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_AtomicLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).AtomicLoad(ctx, req.(*AtomicLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomic_AtomicStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).AtomicStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_AtomicStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).AtomicStore(ctx, req.(*AtomicStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomic_AtomicSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).AtomicSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_AtomicSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).AtomicSwap(ctx, req.(*AtomicSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomic_AtomicCompareAndSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicCompareAndSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).AtomicCompareAndSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_AtomicCompareAndSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).AtomicCompareAndSwap(ctx, req.(*AtomicCompareAndSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Atomic_ServiceDesc is the grpc.ServiceDesc for Atomic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Atomic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xiao.ally.Atomic",
	HandlerType: (*AtomicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AtomicAdd",
			Handler:    _Atomic_AtomicAdd_Handler,
		},
		{
			MethodName: "AtomicLoad",
			Handler:    _Atomic_AtomicLoad_Handler,
		},
		{
			MethodName: "AtomicStore",
			Handler:    _Atomic_AtomicStore_Handler,
		},
		{
			MethodName: "AtomicSwap",
			Handler:    _Atomic_AtomicSwap_Handler,
		},
		{
			MethodName: "AtomicCompareAndSwap",
			Handler:    _Atomic_AtomicCompareAndSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomic.ally.xiao.proto",
}
