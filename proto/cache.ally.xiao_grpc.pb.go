// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: cache.ally.xiao.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cache_CacheSet_FullMethodName    = "/xiao.ally.Cache/CacheSet"
	Cache_CacheGet_FullMethodName    = "/xiao.ally.Cache/CacheGet"
	Cache_CacheDel_FullMethodName    = "/xiao.ally.Cache/CacheDel"
	Cache_CacheKeys_FullMethodName   = "/xiao.ally.Cache/CacheKeys"
	Cache_CacheCount_FullMethodName  = "/xiao.ally.Cache/CacheCount"
	Cache_CacheItems_FullMethodName  = "/xiao.ally.Cache/CacheItems"
	Cache_CacheFlush_FullMethodName  = "/xiao.ally.Cache/CacheFlush"
	Cache_CacheExists_FullMethodName = "/xiao.ally.Cache/CacheExists"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// github.com/patrickmn/go-cache
type CacheClient interface {
	CacheSet(ctx context.Context, in *CacheSetRequest, opts ...grpc.CallOption) (*CacheSetResponse, error)
	CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error)
	CacheDel(ctx context.Context, in *CacheDelRequest, opts ...grpc.CallOption) (*CacheDelResponse, error)
	CacheKeys(ctx context.Context, in *CacheKeysRequest, opts ...grpc.CallOption) (*CacheKeysResponse, error)
	CacheCount(ctx context.Context, in *CacheCountRequest, opts ...grpc.CallOption) (*CacheCountResponse, error)
	CacheItems(ctx context.Context, in *CacheItemsRequest, opts ...grpc.CallOption) (*CacheItemsResponse, error)
	CacheFlush(ctx context.Context, in *CacheFlushRequest, opts ...grpc.CallOption) (*CacheFlushResponse, error)
	CacheExists(ctx context.Context, in *CacheExistsRequest, opts ...grpc.CallOption) (*CacheExistsResponse, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) CacheSet(ctx context.Context, in *CacheSetRequest, opts ...grpc.CallOption) (*CacheSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheSetResponse)
	err := c.cc.Invoke(ctx, Cache_CacheSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheGetResponse)
	err := c.cc.Invoke(ctx, Cache_CacheGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheDel(ctx context.Context, in *CacheDelRequest, opts ...grpc.CallOption) (*CacheDelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheDelResponse)
	err := c.cc.Invoke(ctx, Cache_CacheDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheKeys(ctx context.Context, in *CacheKeysRequest, opts ...grpc.CallOption) (*CacheKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheKeysResponse)
	err := c.cc.Invoke(ctx, Cache_CacheKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheCount(ctx context.Context, in *CacheCountRequest, opts ...grpc.CallOption) (*CacheCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheCountResponse)
	err := c.cc.Invoke(ctx, Cache_CacheCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheItems(ctx context.Context, in *CacheItemsRequest, opts ...grpc.CallOption) (*CacheItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheItemsResponse)
	err := c.cc.Invoke(ctx, Cache_CacheItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheFlush(ctx context.Context, in *CacheFlushRequest, opts ...grpc.CallOption) (*CacheFlushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheFlushResponse)
	err := c.cc.Invoke(ctx, Cache_CacheFlush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CacheExists(ctx context.Context, in *CacheExistsRequest, opts ...grpc.CallOption) (*CacheExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheExistsResponse)
	err := c.cc.Invoke(ctx, Cache_CacheExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility.
//
// github.com/patrickmn/go-cache
type CacheServer interface {
	CacheSet(context.Context, *CacheSetRequest) (*CacheSetResponse, error)
	CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error)
	CacheDel(context.Context, *CacheDelRequest) (*CacheDelResponse, error)
	CacheKeys(context.Context, *CacheKeysRequest) (*CacheKeysResponse, error)
	CacheCount(context.Context, *CacheCountRequest) (*CacheCountResponse, error)
	CacheItems(context.Context, *CacheItemsRequest) (*CacheItemsResponse, error)
	CacheFlush(context.Context, *CacheFlushRequest) (*CacheFlushResponse, error)
	CacheExists(context.Context, *CacheExistsRequest) (*CacheExistsResponse, error)
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheServer struct{}

func (UnimplementedCacheServer) CacheSet(context.Context, *CacheSetRequest) (*CacheSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheSet not implemented")
}
func (UnimplementedCacheServer) CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheGet not implemented")
}
func (UnimplementedCacheServer) CacheDel(context.Context, *CacheDelRequest) (*CacheDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheDel not implemented")
}
func (UnimplementedCacheServer) CacheKeys(context.Context, *CacheKeysRequest) (*CacheKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheKeys not implemented")
}
func (UnimplementedCacheServer) CacheCount(context.Context, *CacheCountRequest) (*CacheCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheCount not implemented")
}
func (UnimplementedCacheServer) CacheItems(context.Context, *CacheItemsRequest) (*CacheItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheItems not implemented")
}
func (UnimplementedCacheServer) CacheFlush(context.Context, *CacheFlushRequest) (*CacheFlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheFlush not implemented")
}
func (UnimplementedCacheServer) CacheExists(context.Context, *CacheExistsRequest) (*CacheExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheExists not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}
func (UnimplementedCacheServer) testEmbeddedByValue()               {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	// If the following call pancis, it indicates UnimplementedCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_CacheSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheSet(ctx, req.(*CacheSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheGet(ctx, req.(*CacheGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheDel(ctx, req.(*CacheDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheKeys(ctx, req.(*CacheKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheCount(ctx, req.(*CacheCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheItems(ctx, req.(*CacheItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheFlush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheFlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheFlush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheFlush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheFlush(ctx, req.(*CacheFlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CacheExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CacheExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_CacheExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CacheExists(ctx, req.(*CacheExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xiao.ally.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheSet",
			Handler:    _Cache_CacheSet_Handler,
		},
		{
			MethodName: "CacheGet",
			Handler:    _Cache_CacheGet_Handler,
		},
		{
			MethodName: "CacheDel",
			Handler:    _Cache_CacheDel_Handler,
		},
		{
			MethodName: "CacheKeys",
			Handler:    _Cache_CacheKeys_Handler,
		},
		{
			MethodName: "CacheCount",
			Handler:    _Cache_CacheCount_Handler,
		},
		{
			MethodName: "CacheItems",
			Handler:    _Cache_CacheItems_Handler,
		},
		{
			MethodName: "CacheFlush",
			Handler:    _Cache_CacheFlush_Handler,
		},
		{
			MethodName: "CacheExists",
			Handler:    _Cache_CacheExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.ally.xiao.proto",
}
