// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: locker.ally.xiao.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Locker_LockerLock_FullMethodName     = "/xiao.ally.Locker/LockerLock"
	Locker_LockerRLock_FullMethodName    = "/xiao.ally.Locker/LockerRLock"
	Locker_LockerTryLock_FullMethodName  = "/xiao.ally.Locker/LockerTryLock"
	Locker_LockerTryRLock_FullMethodName = "/xiao.ally.Locker/LockerTryRLock"
	Locker_LockerUnlock_FullMethodName   = "/xiao.ally.Locker/LockerUnlock"
	Locker_LockerRUnlock_FullMethodName  = "/xiao.ally.Locker/LockerRUnlock"
	Locker_LockerQueues_FullMethodName   = "/xiao.ally.Locker/LockerQueues"
)

// LockerClient is the client API for Locker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockerClient interface {
	LockerLock(ctx context.Context, in *LockerLockRequest, opts ...grpc.CallOption) (*LockerLockResponse, error)
	LockerRLock(ctx context.Context, in *LockerRLockRequest, opts ...grpc.CallOption) (*LockerRLockResponse, error)
	LockerTryLock(ctx context.Context, in *LockerTryLockRequest, opts ...grpc.CallOption) (*LockerTryLockResponse, error)
	LockerTryRLock(ctx context.Context, in *LockerTryRLockRequest, opts ...grpc.CallOption) (*LockerTryRLockResponse, error)
	LockerUnlock(ctx context.Context, in *LockerUnlockRequest, opts ...grpc.CallOption) (*LockerUnlockResponse, error)
	LockerRUnlock(ctx context.Context, in *LockerRUnlockRequest, opts ...grpc.CallOption) (*LockerRUnlockResponse, error)
	LockerQueues(ctx context.Context, in *LockerQueuesRequest, opts ...grpc.CallOption) (*LockerQueuesResponse, error)
}

type lockerClient struct {
	cc grpc.ClientConnInterface
}

func NewLockerClient(cc grpc.ClientConnInterface) LockerClient {
	return &lockerClient{cc}
}

func (c *lockerClient) LockerLock(ctx context.Context, in *LockerLockRequest, opts ...grpc.CallOption) (*LockerLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerLockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerRLock(ctx context.Context, in *LockerRLockRequest, opts ...grpc.CallOption) (*LockerRLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerRLockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerRLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerTryLock(ctx context.Context, in *LockerTryLockRequest, opts ...grpc.CallOption) (*LockerTryLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerTryLockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerTryLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerTryRLock(ctx context.Context, in *LockerTryRLockRequest, opts ...grpc.CallOption) (*LockerTryRLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerTryRLockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerTryRLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerUnlock(ctx context.Context, in *LockerUnlockRequest, opts ...grpc.CallOption) (*LockerUnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerUnlockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerRUnlock(ctx context.Context, in *LockerRUnlockRequest, opts ...grpc.CallOption) (*LockerRUnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerRUnlockResponse)
	err := c.cc.Invoke(ctx, Locker_LockerRUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) LockerQueues(ctx context.Context, in *LockerQueuesRequest, opts ...grpc.CallOption) (*LockerQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockerQueuesResponse)
	err := c.cc.Invoke(ctx, Locker_LockerQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockerServer is the server API for Locker service.
// All implementations must embed UnimplementedLockerServer
// for forward compatibility.
type LockerServer interface {
	LockerLock(context.Context, *LockerLockRequest) (*LockerLockResponse, error)
	LockerRLock(context.Context, *LockerRLockRequest) (*LockerRLockResponse, error)
	LockerTryLock(context.Context, *LockerTryLockRequest) (*LockerTryLockResponse, error)
	LockerTryRLock(context.Context, *LockerTryRLockRequest) (*LockerTryRLockResponse, error)
	LockerUnlock(context.Context, *LockerUnlockRequest) (*LockerUnlockResponse, error)
	LockerRUnlock(context.Context, *LockerRUnlockRequest) (*LockerRUnlockResponse, error)
	LockerQueues(context.Context, *LockerQueuesRequest) (*LockerQueuesResponse, error)
	mustEmbedUnimplementedLockerServer()
}

// UnimplementedLockerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLockerServer struct{}

func (UnimplementedLockerServer) LockerLock(context.Context, *LockerLockRequest) (*LockerLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerLock not implemented")
}
func (UnimplementedLockerServer) LockerRLock(context.Context, *LockerRLockRequest) (*LockerRLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerRLock not implemented")
}
func (UnimplementedLockerServer) LockerTryLock(context.Context, *LockerTryLockRequest) (*LockerTryLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerTryLock not implemented")
}
func (UnimplementedLockerServer) LockerTryRLock(context.Context, *LockerTryRLockRequest) (*LockerTryRLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerTryRLock not implemented")
}
func (UnimplementedLockerServer) LockerUnlock(context.Context, *LockerUnlockRequest) (*LockerUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerUnlock not implemented")
}
func (UnimplementedLockerServer) LockerRUnlock(context.Context, *LockerRUnlockRequest) (*LockerRUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerRUnlock not implemented")
}
func (UnimplementedLockerServer) LockerQueues(context.Context, *LockerQueuesRequest) (*LockerQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerQueues not implemented")
}
func (UnimplementedLockerServer) mustEmbedUnimplementedLockerServer() {}
func (UnimplementedLockerServer) testEmbeddedByValue()                {}

// UnsafeLockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockerServer will
// result in compilation errors.
type UnsafeLockerServer interface {
	mustEmbedUnimplementedLockerServer()
}

func RegisterLockerServer(s grpc.ServiceRegistrar, srv LockerServer) {
	// If the following call pancis, it indicates UnimplementedLockerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Locker_ServiceDesc, srv)
}

func _Locker_LockerLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerLock(ctx, req.(*LockerLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerRLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerRLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerRLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerRLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerRLock(ctx, req.(*LockerRLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerTryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerTryLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerTryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerTryLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerTryLock(ctx, req.(*LockerTryLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerTryRLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerTryRLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerTryRLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerTryRLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerTryRLock(ctx, req.(*LockerTryRLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerUnlock(ctx, req.(*LockerUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerRUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerRUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerRUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerRUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerRUnlock(ctx, req.(*LockerRUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_LockerQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).LockerQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Locker_LockerQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).LockerQueues(ctx, req.(*LockerQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locker_ServiceDesc is the grpc.ServiceDesc for Locker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xiao.ally.Locker",
	HandlerType: (*LockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockerLock",
			Handler:    _Locker_LockerLock_Handler,
		},
		{
			MethodName: "LockerRLock",
			Handler:    _Locker_LockerRLock_Handler,
		},
		{
			MethodName: "LockerTryLock",
			Handler:    _Locker_LockerTryLock_Handler,
		},
		{
			MethodName: "LockerTryRLock",
			Handler:    _Locker_LockerTryRLock_Handler,
		},
		{
			MethodName: "LockerUnlock",
			Handler:    _Locker_LockerUnlock_Handler,
		},
		{
			MethodName: "LockerRUnlock",
			Handler:    _Locker_LockerRUnlock_Handler,
		},
		{
			MethodName: "LockerQueues",
			Handler:    _Locker_LockerQueues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locker.ally.xiao.proto",
}
